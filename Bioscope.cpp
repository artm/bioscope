#include "Bioscope.hpp"

struct Bioscope::Detail {
    static bool avInitialized;
    /* av structures */
    AVFormatContext * formatContext;
    AVCodecContext * codecContext;
    AVCodec * codec;
    int vStreamIndex;
    AVFrame * frame;
    AVFrame * frameRGB;
    SwsContext * convertContext;

    /* cached metadata */
    qint64 duration;
    int width, height;

    /* remember the time */
    qint64 last_pts;

    Detail() :
        formatContext(0), codecContext(0), codec(0),
        vStreamIndex(-1),
        frame(0), frameRGB(0), convertContext(0),
        duration(0), width(0), height(0),
        last_pts(0)
    {
        if (!avInitialized) {
            av_register_all();
            avInitialized = true;
        }
    }

    ~Detail() {
        if (convertContext) sws_freeContext(convertContext);
        if (frameRGB) av_free(frameRGB);
        if (frame) av_free(frame);
        if (codecContext) avcodec_close(codecContext);
        if (formatContext) av_close_input_file(formatContext);
    }

    static QString fferror(int av_err) {
        char buff[1024];
        return av_strerror(av_err, buff, sizeof(buff)) == 0
                ? buff
                : "Unknown ffmpeg error";
    }
};

struct AVCheck {
    AVCheck(const QString& path) : m_path(path) {}
    void operator<<(int av_err) {
        if (av_err) {
            throw Bioscope::AVError(m_path, av_err);
        }
    }
private:
    QString m_path;
};

bool Bioscope::Detail::avInitialized = false;

Bioscope::AVError::AVError(const QString &path, int av_err) :
    Error(QString("FFMpeg error at %1: %2").arg(path).arg( Detail::fferror(av_err) ))
{}

Bioscope::Bioscope(const QString & _path, QObject *parent) :
    QObject(parent),
    m_detail( new Detail )
{
    QString path = QFileInfo(_path).canonicalFilePath();

    if (path.isEmpty())
        throw NoFile(_path);

    AVCheck check(path);

    check << av_open_input_file( &m_detail->formatContext,
                                 qPrintable(path), NULL, 0, NULL);

    Q_ASSERT(m_detail->formatContext);
    // HACK this solves "max_analyze_duration reached" warning
    m_detail->formatContext->max_analyze_duration *= 10;

    av_find_stream_info( m_detail->formatContext );

    for (unsigned int i = 0; i < m_detail->formatContext->nb_streams; i++) {
        if ( m_detail->formatContext->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO ) {
            m_detail->vStreamIndex=(int)i;
            break;
        }
    }
    if (m_detail->vStreamIndex < 0) throw UnsupportedFile(path);

    m_detail->codecContext = m_detail->formatContext->streams[m_detail->vStreamIndex]->codec;
    m_detail->codec = avcodec_find_decoder(m_detail->codecContext->codec_id);
    if (m_detail->codec == 0) throw UnsupportedFile(path);

    check << avcodec_open(m_detail->codecContext, m_detail->codec);

    m_detail->width = m_detail->codecContext->width;
    m_detail->height = m_detail->codecContext->height;

    // HACK to correct wrong frame rates that seem to be generated by some codecs
    // cf.: http://web.me.com/dhoerl/Home/Tech_Blog/Entries/2009/1/
    // 22_Revised_avcodec_sample.c.html
    if (m_detail->codecContext->time_base.num > 1000
            && m_detail->codecContext->time_base.den == 1)
        m_detail->codecContext->time_base.den=1000;
    {
        AVRational q_duration = {
            m_detail->formatContext->streams[m_detail->vStreamIndex]->duration,
            1 };

        AVRational seconds = av_mul_q(
                    q_duration,
                    m_detail->formatContext->streams[m_detail->vStreamIndex]->time_base );

        m_detail->duration = 1000 * (qint64)seconds.num / (qint64)seconds.den;
    }

    m_detail->frame = avcodec_alloc_frame();
    m_detail->frameRGB = avcodec_alloc_frame();
    m_detail->convertContext = sws_getContext(m_detail->width, m_detail->height,
                                              m_detail->codecContext->pix_fmt,
                                              m_detail->width, m_detail->height,
                                              PIX_FMT_RGB24, SWS_BICUBIC, 0, 0, 0);


}

Bioscope::~Bioscope()
{

}


bool Bioscope::supportedFile(const QString & path)
{
    try {
        Bioscope tmp(path);
        return true;
    } catch (...) {
        return false;
    }
}

qint64 Bioscope::duration() const
{
    return m_detail->duration;
}

int Bioscope::width() const
{
    return m_detail->width;
}

int Bioscope::height() const
{
    return m_detail->height;
}

void Bioscope::frame(QImage * img)
{
    AVPacket packet;
    int done = 0;
    while (av_read_frame(m_detail->formatContext, &packet) >= 0) {
        if (packet.stream_index == m_detail->vStreamIndex) {
            avcodec_decode_video2(
                        m_detail->codecContext,
                        m_detail->frame,
                        &done,
                        &packet);
            if (done) {
                /* if frame isn't compatible - change it */
                if (img->width() != m_detail->width
                        || img->height() != m_detail->height
                        || img->format() != QImage::Format_RGB888) {
                    *img = QImage(m_detail->width, m_detail->height, QImage::Format_RGB888  );
                }

                avpicture_fill((AVPicture *)m_detail->frameRGB,
                               (uint8_t*) img->bits(),
                               PIX_FMT_RGB24,
                               img->width(),
                               img->height());

                sws_scale(m_detail->convertContext,
                          m_detail->frame->data, m_detail->frame->linesize, 0,
                          m_detail->codecContext->height,
                          m_detail->frameRGB->data, m_detail->frameRGB->linesize);

                m_detail->last_pts = packet.pts + packet.duration; // assuming each frame is a single packet in MJPEG

                return;
            }
        }
    }

    emit streamEnd();
}

void Bioscope::seek(qint64 ms)
{
    // ms to time_base units...
    AVRational sec = { (int)ms, 1000};
    AVRational ts = av_div_q(sec,
                             m_detail->formatContext->streams[m_detail->vStreamIndex]->time_base);
    m_detail->last_pts = ts.num / ts.den;
    av_seek_frame(m_detail->formatContext, m_detail->vStreamIndex, m_detail->last_pts, 0);
}

qint64 Bioscope::time()
{
    AVRational pts = { m_detail->last_pts, 1 };
    AVRational time_base = m_detail->formatContext->streams[m_detail->vStreamIndex]->time_base;
    AVRational t = av_mul_q(pts, time_base);
    return 1000 * t.num / t.den; // ms
}
